# .circleci/config.yml

version: 2
jobs:
  build:
    machine:
      image: circleci/classic:latest
      environment:
          ENV: CI
    steps:
      - checkout
      - run:
          name: "Build And Push"
          command: |
            docker build -f Sevices/AVT.Agents.Services/Dockerfile -t $DKR_IMG Sevices/AVT.Agents.Services
            docker login -u $DKR_UID -p $DKR_PWD  
            docker tag $DKR_IMG $DKR_REGITRY/$DKR_IMG:latest
            docker push $DKR_REGITRY/$DKR_IMG:latest
      - run:
          name: Save image to an archive
          command: |
            mkdir docker-image
            docker save -o docker-image/image.tar $DKR_IMG
      - persist_to_workspace:
          root: .
          paths:
            - docker-image
  deploy:
    docker:
      - image: circleci/python:3.6.1
    environment:
      AWS_DEFAULT_OUTPUT: json
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: workspace
      - restore_cache:
          key: v1-{{ checksum "requirements.txt" }}
      - run:
          name: Install awscli
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
      - save_cache:
          key: v1-{{ checksum "requirements.txt" }}
          paths:
            - "venv"
      - run:
          name: Configuring Environment
          command: | 
            . venv/bin/activate            
            echo "*** preconfiguring environment ... ***"    
            eval aws configure set aws_access_key_id $AWS_KEY
            eval aws configure set aws_secret_access_key $AWS_SECRET
            eval aws configure set default.region eu-west-1
      - run:
          name: Load image from local file
          command: |
            docker load --input workspace/docker-image/image.tar
      - run:
          name: Push image to ECR
          command: |
            . venv/bin/activate
            eval $(aws ecr get-login --region eu-west-1 --no-include-email)
            docker tag $DKR_IMG 166778461577.dkr.ecr.eu-west-1.amazonaws.com/$DKR_IMG:latest
            docker push 166778461577.dkr.ecr.eu-west-1.amazonaws.com/$DKR_IMG:latest
      - run:
          name: Deploy Scheduler to ECS
          command: |
            . venv/bin/activate
            export TASK_NAME=$ECS_TASK_SHCEDULER
            export SERVICE_NAME=$ECS_SERVICE_SHCEDULER
            export ARG_TSK="scheduler"
            JQ="jq --raw-output --exit-status"
            
            export CLUSTERS=$(aws ecs list-clusters | grep $ECS_CLUSTER_NAME || aws ecs create-cluster --cluster-name $ECS_CLUSTER_NAME)

            echo "*** ecs $TASM_NAME task initiating ... ***"
            export TASK_VERSION=$(aws ecs  register-task-definition --family "$TASK_NAME" --execution-role-arn "$TASK_EXECUTOR" --network-mode "awsvpc" --requires-compatibilities "FARGATE" --cpu 256 --memory 1024 --container-definitions "[{\"name\": \"agents\",\"image\": \"166778461577.dkr.ecr.eu-west-1.amazonaws.com/agents:latest\",\"memory\": 512,\"portMappings\":[{\"containerPort\": 80,\"hostPort\": 80,\"protocol\": \"tcp\"}],\"essential\": true,\"entryPoint\":[\"/bin/sh\"],\"command\":[\"dotnet out/AVT.Agents.Services.dll --ServiceName $ARG_TSK\"],\"environment\":[{\"name\": \"aws_access_key_id\",\"value\": \"$AWS_KEY\"},{\"name\": \"aws_secret_access_key\",\"value\": \"$AWS_SECRET\"}],\"workingDirectory\": \"/app\",\"disableNetworking\": false,\"privileged\": false,\"healthCheck\":{\"command\": [ \"\" ],\"interval\": 300,\"timeout\": 60,\"retries\": 5,\"startPeriod\":1}}]" | $JQ '.taskDefinition.revision')
            
            echo "*** Task Definition *** >  $TASK_NAME:$TASK_VERSION"
            export SERVICES=$(aws ecs list-services --cluster $ECS_CLUSTER_NAME  | grep $SERVICE_NAME || aws ecs create-service --cluster "$ECS_CLUSTER_NAME" --service-name "$SERVICE_NAME" --role "arn:aws:iam::$AWS_ACCOUNT_ID:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService" --task-definition "$TASK_NAME" --load-balancers '[{"targetGroupArn":"sg-0ccf54ddcbb1bb3eb","containerName":"agents","containerPort":80}]' --desired-count 1 --launch-type "FARGATE" --deployment-configuration '{"maximumPercent":150,"minimumHealthyPercent":0}' --network-configuration '{"awsvpcConfiguration": {"subnets": ["subnet-519ffc19","subnet-61861507","subnet-cb37ea91"],"securityGroups": ["subnet-cb37ea91"],"assignPublicIp":"ENABLED"}}' --scheduling-strategy "REPLICA")            
            echo "*** creating service and task for $TASK_NAME ... ***" 
            export DEPLOYED_SERVICE=$(aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $SERVICE_NAME --task-definition $TASK_NAME:$TASK_VERSION  | $JQ '.service.serviceName')
            echo "Deployment of $DEPLOYED_SERVICE complete"
      - run:
          name: Deploy Simulator to ECS
          command: |
            . venv/bin/activate
            export AWS_KEY=$AWS_KEY
            export AWS_SECRET=$AWS_SECRET
            export TASK_NAME=$ECS_TASK_SIMULATOR
            export SERVICE_NAME=$ECS_SERVICE_SIMULATOR
            export ARG_TSK="simulator"
            JQ="jq --raw-output --exit-status"
            
            export CLUSTERS=$(aws ecs list-clusters | grep $ECS_CLUSTER_NAME || aws ecs create-cluster --cluster-name $ECS_CLUSTER_NAME)

            echo "*** ecs $TASM_NAME task initiating ... ***"
            export TASK_VERSION=$(aws ecs  register-task-definition --family "$TASK_NAME" --execution-role-arn "$TASK_EXECUTOR" --network-mode "awsvpc" --requires-compatibilities "FARGATE" --cpu 256 --memory 1024 --container-definitions "[{\"name\": \"agents\",\"image\": \"166778461577.dkr.ecr.eu-west-1.amazonaws.com/agents:latest\",\"memory\": 512,\"portMappings\":[{\"containerPort\": 80,\"hostPort\": 80,\"protocol\": \"tcp\"}],\"essential\": true,\"entryPoint\":[\"/bin/sh\"],\"command\":[\"dotnet out/AVT.Agents.Services.dll --ServiceName $ARG_TSK\"],\"environment\":[{\"name\": \"aws_access_key_id\",\"value\": \"$AWS_KEY\"},{\"name\": \"aws_secret_access_key\",\"value\": \"$AWS_SECRET\"}],\"workingDirectory\": \"/app\",\"disableNetworking\": false,\"privileged\": false,\"healthCheck\":{\"command\": [ \"\" ],\"interval\": 300,\"timeout\": 60,\"retries\": 5,\"startPeriod\":1}}]" | $JQ '.taskDefinition.revision')
            
            echo "*** Task Definition *** >  $TASK_NAME:$TASK_VERSION"
            export SERVICES=$(aws ecs list-services --cluster $ECS_CLUSTER_NAME  | grep $SERVICE_NAME || aws ecs create-service --cluster "$ECS_CLUSTER_NAME" --service-name "$SERVICE_NAME" --role "arn:aws:iam::$AWS_ACCOUNT_ID:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService" --task-definition "$TASK_NAME" --load-balancers '[{"targetGroupArn":"sg-0ccf54ddcbb1bb3eb","containerName":"agents","containerPort":80}]' --desired-count 1 --launch-type "FARGATE" --deployment-configuration '{"maximumPercent":150,"minimumHealthyPercent":0}' --network-configuration '{"awsvpcConfiguration": {"subnets": ["subnet-519ffc19","subnet-61861507","subnet-cb37ea91"],"securityGroups": ["subnet-cb37ea91"],"assignPublicIp":"ENABLED"}}' --scheduling-strategy "REPLICA")            
            echo "*** creating service and task for $TASK_NAME ... ***" 
            export DEPLOYED_SERVICE=$(aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $SERVICE_NAME --task-definition $TASK_NAME:$TASK_VERSION  | $JQ '.service.serviceName')
            echo "Deployment of $DEPLOYED_SERVICE complete"
workflows:
  version: 2
  build-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master